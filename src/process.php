<?php
session_start();
require_once 'config.php';
require_once 'functions.php';

// –í–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞
ob_start();

// –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
ini_set('display_errors', 0);
error_reporting(E_ALL);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞
function sendJsonResponse($data) {
    ob_clean();
    header('Content-Type: application/json');
    header('Cache-Control: no-cache, must-revalidate');
    echo json_encode($data);
    exit;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
if (!isset($_SESSION['admin_id'])) {
    sendJsonResponse(['status' => 'error', 'message' => 'Unauthorized']);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥
function addMessage($messages, $text, $type = 'info') {
    $messages[] = [
        'text' => $text,
        'type' => $type,
        'time' => date('H:i:s')
    ];
    return $messages;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏
function parseProxyString($proxy_string) {
    if (empty($proxy_string)) return null;

    if (preg_match('/^socks5:\/\/([^:]+):([^@]+)@([^:]+):(\d+)$/', $proxy_string, $matches)) {
        return [
            'type' => CURLPROXY_SOCKS5,
            'username' => $matches[1],
            'password' => $matches[2],
            'host' => $matches[3],
            'port' => $matches[4]
        ];
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Twilio API
function twilioRequest($url, $account_sid, $auth_token, $proxy_string = '') {
    $ch = curl_init();
    
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTPHEADER => [
            'Authorization: Basic ' . base64_encode($account_sid . ':' . $auth_token)
        ]
    ]);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    if (!empty($proxy_string)) {
        $proxy = parseProxyString($proxy_string);
        if ($proxy) {
            curl_setopt_array($ch, [
                CURLOPT_PROXYTYPE => CURLPROXY_SOCKS5,
                CURLOPT_PROXY => $proxy['host'],
                CURLOPT_PROXYPORT => $proxy['port'],
                CURLOPT_PROXYUSERPWD => $proxy['username'] . ':' . $proxy['password']
            ]);
            
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–∫—Å–∏ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL
            curl_setopt($ch, CURLOPT_PROXY_SSL_VERIFYPEER, false);
        }
    }
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    
    if (curl_errno($ch)) {
        $error = curl_error($ch);
        curl_close($ch);
        throw new Exception($error);
    }
    
    curl_close($ch);
    
    $data = json_decode($response, true);
    
    if ($http_code === 401) {
        throw new Exception("AUTH ERROR: Account is suspended", 401);
    }
    
    if ($http_code !== 200) {
        throw new Exception("API request failed with code $http_code: " . ($data['message'] ?? $response));
    }
    
    if (json_last_error() !== JSON_ERROR_NONE) {
        throw new Exception("JSON decode error: " . json_last_error_msg());
    }
    
    return $data;
}

$messages = [];
try {
    $mysqli = getDB();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (!isset($_SESSION['update_in_progress'])) {
        $_SESSION['update_in_progress'] = date('Y-m-d H:i:s');
        $_SESSION['processed_accounts'] = 0;
        $_SESSION['log_messages'] = [];
        $messages = addMessage($messages, "üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    $query = "SELECT numeric_id, account_sid, auth_token, proxy_address, status 
              FROM twilio_accounts 
              WHERE status != 'deleted' 
              AND (last_check < ? OR last_check IS NULL)
              ORDER BY last_check ASC, numeric_id ASC
              LIMIT 1";
              
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('s', $_SESSION['update_in_progress']);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($account = $result->fetch_assoc()) {
        $messages = addMessage($messages, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {$account['account_sid']} (—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {$account['status']})");
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            $url = "https://api.twilio.com/2010-04-01/Accounts/{$account['account_sid']}.json";
            $account_info = twilioRequest($url, $account['account_sid'], $account['auth_token'], $account['proxy_address']);
            $messages = addMessage($messages, "‚úì –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞");
            
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            $url_balance = "https://api.twilio.com/2010-04-01/Accounts/{$account['account_sid']}/Balance.json";
            $balance_info = twilioRequest($url_balance, $account['account_sid'], $account['auth_token'], $account['proxy_address']);
            $balance = $balance_info['balance'] ?? 0;
            $messages = addMessage($messages, "üí∞ –ë–∞–ª–∞–Ω—Å: $" . number_format($balance, 2), 'success');
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞
            $url = "https://api.twilio.com/2010-04-01/Accounts/{$account['account_sid']}/IncomingPhoneNumbers.json";
            $numbers = twilioRequest($url, $account['account_sid'], $account['auth_token'], $account['proxy_address']);
            $numbers_count = count($numbers['incoming_phone_numbers'] ?? []);
            $messages = addMessage($messages, "üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: $numbers_count");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ
            $mysqli->begin_transaction();
            
            $update_query = "UPDATE twilio_accounts SET 
                balance = ?,
                numbers_count = ?,
                status = 'active',
                last_check = NOW(),
                last_error = NULL
                WHERE numeric_id = ?";
            
            $stmt = $mysqli->prepare($update_query);
            $stmt->bind_param('dii', 
                $balance,
                $numbers_count,
                $account['numeric_id']
            );
            $stmt->execute();
            
            $mysqli->commit();
            $messages = addMessage($messages, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω", 'success');
            
        } catch (Exception $e) {
            if (isset($mysqli) && $mysqli->connect_errno === 0) {
                $mysqli->rollback();
            }
            
            $error_msg = $e->getMessage();
            $status = 'suspended';
            
            if (stripos($error_msg, 'authenticate') !== false || stripos($error_msg, 'auth error') !== false || stripos($error_msg, '401') !== false) {
                $messages = addMessage($messages, "‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 'warning');
            } elseif (stripos($error_msg, 'curl') !== false || stripos($error_msg, 'timeout') !== false) {
                $messages = addMessage($messages, "‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - " . $error_msg, 'warning');
            } else {
                $messages = addMessage($messages, "‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " . $error_msg, 'warning');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            $update_query = "UPDATE twilio_accounts SET 
                status = ?,
                last_check = NOW(),
                last_error = ?,
                balance = 0,
                numbers_count = 0
                WHERE numeric_id = ?";
            
            $stmt = $mysqli->prepare($update_query);
            $error_msg = substr($error_msg, 0, 255);
            $stmt->bind_param('ssi', $status, $error_msg, $account['numeric_id']);
            $stmt->execute();
            
            $messages = addMessage($messages, "üìù –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", 'info');
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        $_SESSION['processed_accounts'] = ($_SESSION['processed_accounts'] ?? 0) + 1;
        $_SESSION['log_messages'] = array_merge($_SESSION['log_messages'] ?? [], $messages);
        
        sendJsonResponse([
            'status' => 'processing',
            'messages' => $messages,
            'progress' => [
                'processed' => $_SESSION['processed_accounts']
            ]
        ]);
        
    } else {
        // –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        $final_message = "‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ";
        $_SESSION['log_messages'][] = ['text' => $final_message, 'type' => 'success', 'time' => date('H:i:s')];
        
        sendJsonResponse([
            'status' => 'completed',
            'messages' => [['text' => $final_message, 'type' => 'success', 'time' => date('H:i:s')]]
        ]);
    }
    
} catch (Exception $e) {
    $error_message = "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage();
    $_SESSION['log_messages'][] = ['text' => $error_message, 'type' => 'error', 'time' => date('H:i:s')];
    
    sendJsonResponse([
        'status' => 'error',
        'messages' => [['text' => $error_message, 'type' => 'error', 'time' => date('H:i:s')]]
    ]);
}